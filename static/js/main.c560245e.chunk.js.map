{"version":3,"sources":["Header/index.js","Section/index.js","Form/index.js","Tasks/index.js","TextButtons/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","name","extraHeaderContents","className","Section","children","Form","placeholder","Tasks","taskList","map","id","done","key","TextButtons","length","document","querySelector","disabled","every","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAWeA,G,gBATA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,oBACpB,OACI,4BAAQC,UAAU,0BACd,wBAAIA,UAAU,8BAA8BF,GAC3CC,GAA4C,MCS1CE,EAXC,SAAC,GAA4C,IAA3CH,EAA0C,EAA1CA,KAAMI,EAAoC,EAApCA,SAAUH,EAA0B,EAA1BA,oBAC9B,OACI,6BAASC,UAAU,WACf,kBAAC,EAAD,CAAQA,UAAU,yBAAyBF,KAAMA,EAAMC,oBAAqBA,IAC5E,0BAAMC,UAAU,wBACXE,KCKFC,G,MAXF,WACT,OACI,0BAAMH,UAAU,eACZ,2BAAOI,YAAY,wBAAwBJ,UAAU,6BACrD,4BAAQA,UAAU,8BAAlB,oBCcGK,G,MAlBD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACb,OACI,wBAAIN,UAAU,SAENM,EAASC,KAAI,gBAAGC,EAAH,EAAGA,GAAIV,EAAP,EAAOA,KAAMW,EAAb,EAAaA,KAAb,OAEL,wBAAIT,UAAS,qBAAiBS,EAAO,qBAAuB,IAAOC,IAAKF,GACpE,4BAAQR,UAAU,sBAAuBS,EAAO,SAAM,IACtD,4BAAQT,UAAU,mBAAmBF,GACrC,4BAAQE,UAAU,kDAAlB,uBCQbW,G,MAjBK,SAAC,GAAkB,IAAhBL,EAAe,EAAfA,SACnB,OAAOA,EAASM,OAAS,GACrB,yBAAKZ,UAAU,eACX,4BAAQA,UAAU,2BACd,8BACIa,SAASC,cAAc,UAAY,aAAU,SAFrD,mBAKA,4BAAQd,UAAU,0BAA0Be,SACxCT,EAASU,OAAM,SAAAV,GAAQ,OAAIA,EAASG,SADxC,4BCkBGQ,MAnBf,WACE,IAAIX,EAAW,CACb,CAAEE,GAAI,EAAGV,KAAM,uBAAcW,MAAM,GACnC,CAAED,GAAI,EAAGV,KAAM,8BAAqBW,MAAM,IAG5C,OACE,yBAAKT,UAAU,YACb,gDACA,kBAAC,EAAD,CAASF,KAAK,sBACZ,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAASA,KAAK,mBAAcC,oBAAqB,kBAAC,EAAD,CAAaO,SAAUA,KACtE,kBAAC,EAAD,CAAOA,SAAUA,OCXLY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFZ,SAASC,cAAc,UDyHnB,kBAAmBY,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c560245e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ name, extraHeaderContents }) => {\r\n    return (\r\n        <header className=\"section__sectionHeader\">\r\n            <h2 className=\"section__sectionHeaderText\">{name}</h2>\r\n            {extraHeaderContents ? extraHeaderContents : ''}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './section.css';\r\nimport Header from '../Header';\r\n\r\nconst Section = ({name, children, extraHeaderContents }) => {\r\n    return (\r\n        <section className=\"section\">\r\n            <Header className=\"section__sectionHeader\" name={name} extraHeaderContents={extraHeaderContents} />\r\n            <main className=\"section__sectionBody\">\r\n                {children}\r\n            </main>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport './addTaskForm.css';\r\n\r\nconst Form = () => {\r\n    return (\r\n        <form className=\"addTaskForm\">\r\n            <input placeholder=\"Co jest do zrobienia?\" className=\"addTaskForm__newTaskName\"/>\r\n            <button className=\"addTaskForm__addTaskButton\">\r\n                    Dodaj zadanie\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './tasks.css';\r\n\r\nconst Tasks = ({ taskList }) => {\r\n    return (\r\n        <ul className=\"tasks\">\r\n            {\r\n                taskList.map(({ id, name, done }) =>\r\n                    (\r\n                        <li className={`tasks__task${(done ? ' tasks__task--done' : '')}`} key={id}>\r\n                            <button className=\"tasks__smallButton\">{(done ? 'âœ”' : '')}</button>\r\n                            <strong className=\"tasks__taskName\">{name}</strong>\r\n                            <button className=\"tasks__smallButton tasks__smallButton--warning\">ðŸ—‘</button>\r\n                        </li>\r\n                    )\r\n                )\r\n            }\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Tasks;","import React from 'react';\r\nimport './textButtons.css';\r\n\r\nconst TextButtons = ({ taskList }) => {\r\n    return taskList.length > 0 && (\r\n        <div className=\"textButtons\">\r\n            <button className=\"textButtons__textButton\">\r\n                <span>{\r\n                    document.querySelector('.tasks') ? 'PokaÅ¼' : 'Ukryj' // .contains('tasks--hideDone') \r\n                }</span> ukoÅ„czone\r\n            </button>\r\n            <button className=\"textButtons__textButton\" disabled={\r\n                taskList.every(taskList => taskList.done)\r\n            }>\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextButtons;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Section from './Section';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport TextButtons from './TextButtons';\n\n\n\nfunction App() {\n  let taskList = [\n    { id: 1, name: 'zrobiÄ‡ coÅ›', done: false },\n    { id: 2, name: 'zrobiÄ‡ coÅ› innego', done: true },\n  ]\n  \n  return (\n    <div className=\"taskList\">\n      <h1>Lista zadaÅ„</h1>\n      <Section name='Dodaj nowe zadanie' >\n        <Form />\n      </Section>\n      <Section name='Lista zadaÅ„' extraHeaderContents={<TextButtons taskList={taskList} />}>\n        <Tasks taskList={taskList} />\n      </Section>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}