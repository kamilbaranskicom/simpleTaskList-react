{"version":3,"sources":["SectionHeader/index.js","Section/index.js","Form/index.js","Tasks/index.js","TextButtons/index.js","App.js","serviceWorker.js","index.js"],"names":["SectionHeader","name","extraHeaderContents","className","Section","children","Form","addTask","useState","newTaskName","setNewTaskName","onSubmit","event","preventDefault","trim","document","querySelector","focus","placeholder","value","onChange","target","Tasks","taskList","hideDoneTasks","toggleDone","removeTask","map","id","done","key","onClick","TextButtons","toggleHideDoneTasks","setAllDone","length","disabled","every","App","setHideDoneTasks","setTaskList","getFirstUnusedId","arrayOfObjects","number","some","task","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.80f35e55.chunk.js","sourcesContent":["import React from 'react';\n\nconst SectionHeader = ({ name, extraHeaderContents }) => {\n    return (\n        <header className=\"section__sectionHeader\">\n            <h2 className=\"section__sectionHeaderText\">{name}</h2>\n            {extraHeaderContents}\n        </header>\n    )\n}\n\nexport default SectionHeader;","import React from 'react';\nimport './section.css';\nimport SectionHeader from '../SectionHeader';\n\nconst Section = ({name, children, extraHeaderContents }) => {\n    return (\n        <section className=\"section\">\n            <SectionHeader name={name} extraHeaderContents={extraHeaderContents} />\n            <main className=\"section__sectionBody\">\n                {children}\n            </main>\n        </section>\n    )\n}\n\nexport default Section;","import React, { useState } from 'react';\nimport './addTaskForm.css';\n\nconst Form = ({ addTask }) => {\n    const [newTaskName, setNewTaskName] = useState('');\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n        if (newTaskName.trim()) {\n            addTask(newTaskName.trim());\n            setNewTaskName('');\n        };\n        // gonna learn better way of input focus\n        document.querySelector('.addTaskForm__newTaskName').focus();\n    }\n\n    return (\n        <form className=\"addTaskForm\" onSubmit={onFormSubmit}>\n            <input\n                placeholder=\"Co jest do zrobienia?\"\n                className=\"addTaskForm__newTaskName\"\n                value={newTaskName}\n                onChange={event => setNewTaskName(event.target.value)}\n            />\n            <button className=\"addTaskForm__addTaskButton\">\n                Dodaj zadanie\n            </button>\n        </form>\n    );\n}\n\nexport default Form;","import React from 'react';\nimport './tasks.css';\n\nconst Tasks = ({ taskList, hideDoneTasks, toggleDone, removeTask }) => {\n    return (\n        <ul className={`tasks${hideDoneTasks ? ' tasks--hideDoneTasks' : ''}`}>{\n            taskList.map(({ id, name, done }) =>\n                (\n                    <li className={`tasks__task${(done ? ' tasks__task--done' : '')}`} key={id}>\n                        <button\n                            className=\"tasks__smallButton\"\n                            onClick={() => { toggleDone(id) }}\n                        >\n                            {(done ? 'âœ”' : '')}\n                        </button>\n                        <strong className=\"tasks__taskName\">\n                            {name}\n                        </strong>\n                        <button\n                            className=\"tasks__smallButton tasks__smallButton--warning\"\n                            onClick={() => { removeTask(id) }}\n                        >\n                            ðŸ—‘\n                        </button>\n                    </li>\n                )\n            )\n        }</ul>\n    )\n}\n\nexport default Tasks;","import React from 'react';\nimport './textButtons.css';\n\nconst TextButtons = ({ taskList, hideDoneTasks, toggleHideDoneTasks, setAllDone }) => {\n    return taskList.length > 0 && (\n        <div className=\"textButtons\">\n            <button\n                className=\"textButtons__textButton\"\n                onClick={toggleHideDoneTasks}\n            >\n                {hideDoneTasks ? 'PokaÅ¼' : 'Ukryj'} ukoÅ„czone\n            </button>\n            <button\n                className=\"textButtons__textButton\"\n                disabled={taskList.every(taskList => taskList.done)}\n                onClick={setAllDone}\n            >\n                UkoÅ„cz wszystkie\n            </button>\n        </div>\n    )\n}\n\nexport default TextButtons;","import React, { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Section from './Section';\nimport Form from './Form';\nimport Tasks from './Tasks';\nimport TextButtons from './TextButtons';\n\nfunction App() {\n    const [hideDoneTasks, setHideDoneTasks] = useState(false);\n    const [taskList, setTaskList] = useState([\n        // { id: 1, name: 'do something', done: false },\n        // { id: 2, name: 'do something else', done: true },\n    ]);\n\n    const addTask = (name) => {\n        setTaskList([\n            ...taskList,\n            {\n                id: getFirstUnusedId(taskList),\n                name,\n                done: false,\n            }\n        ])\n    }\n    const getFirstUnusedId = (arrayOfObjects) => {\n        for (let number = 0; number < arrayOfObjects.length + 1; number++) {\n            if (!arrayOfObjects.some(({ id }) => id === number)) { return number }\n        }\n        return arrayOfObjects.length;\n    }\n    const removeTask = (id) => {\n        setTaskList(taskList.filter((task) => task.id !== id))\n    }\n    const toggleDone = (id) => {\n        setTaskList(taskList.map((task) => {\n            if (task.id === id) {\n                return { ...task, done: !task.done };\n            }\n            return task;\n        }));\n    }\n    const setAllDone = () => {\n        setTaskList(taskList.map((task) => ({ ...task, done: true })));\n    }\n    const toggleHideDoneTasks = () => {\n        setHideDoneTasks(!hideDoneTasks);\n    }\n\n    return (\n        <div className=\"taskList\">\n            <h1>Lista zadaÅ„</h1>\n            <Section name='Dodaj nowe zadanie'>\n                <Form addTask={addTask} />\n            </Section>\n            <Section\n                name='Lista zadaÅ„'\n                extraHeaderContents={\n                    <TextButtons\n                        taskList={taskList}\n                        hideDoneTasks={hideDoneTasks}\n                        toggleHideDoneTasks={toggleHideDoneTasks}\n                        setAllDone={setAllDone}\n                    />\n                }\n            >\n                <Tasks\n                    taskList={taskList}\n                    hideDoneTasks={hideDoneTasks}\n                    toggleDone={toggleDone}\n                    removeTask={removeTask}\n                />\n            </Section>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}